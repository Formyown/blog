{"meta":{"title":"Formyown的博客","subtitle":null,"description":null,"author":"Formyown","url":"http://formyown.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-02-16T08:15:28.961Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"/404.html","permalink":"http://formyown.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-02-16T08:15:29.011Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"about/index.html","permalink":"http://formyown.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-02-16T08:15:29.023Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"books/index.html","permalink":"http://formyown.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-02-16T08:15:29.036Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"categories/index.html","permalink":"http://formyown.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-02-16T08:15:29.052Z","updated":"2018-10-04T14:11:17.000Z","comments":true,"path":"links/index.html","permalink":"http://formyown.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-02-16T08:15:29.068Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"repository/index.html","permalink":"http://formyown.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-02-16T08:15:29.085Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"tags/index.html","permalink":"http://formyown.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Ethereum以太坊签名验证算法Java实现","slug":"Ethereum以太坊签名验证算法Java实现","date":"2019-02-16T07:41:00.000Z","updated":"2019-02-16T17:27:10.425Z","comments":true,"path":"2019/02/16/Ethereum以太坊签名验证算法Java实现/","link":"","permalink":"http://formyown.github.io/2019/02/16/Ethereum以太坊签名验证算法Java实现/","excerpt":"","text":"开始之前 在验证之前，我们需要这些基本的信息: 签名，原文，地址（或者公钥） Sig: 0x5f3c4ab309427d25cdc34a41cb432610c6c817e76ce9aec0c9336365063687ff29c92963edd6935f365d5f28c146f227881b626c7db18e87b9baf2089729741b1c Message: 签名这段文字以验证你是这个账户的持有者。 Address: 0x1c52C6F743351fC9b97AE4Fe32194A588398FE69 处理原文 首先我们需要将原为处理为Hash形式 1MessageHash = keccak256(prefix + message) 这个prefix是个什么东西？ 我们来看看签名在生成的时候是如何计算的。在Ethereum官方文档中，关于eth_sig的描述是这样的： 可疑的地方是sign(keccak256(&quot;\\x19Ethereum Signed Message:\\n&quot; + len(message) + message)))，我们可以看到在message之前添加了一段话：&quot;\\x19Ethereum Signed Message:\\n&quot; + len(message)。真正被签名的数据不是单纯的message，而是在message之前添加了这句话（prefix）后整体做了hash运算。所以，我们在计算hash的时候，也需要照做。 123String message = \"签名这段文字以验证你是这个账户的持有者。\";byte[] msgBuffer = message.getBytes(\"UTF-8\");byte[] msgPrefix = (\"\\u0019Ethereum Signed Message:\\n\" + msgBuffer.length).getBytes(\"UTF-8\"); 现在已经将原始消息和prefix都转换成了字节数组的形式，接下来需要把这两部分拼接起来 123byte[] msg = new byte[msgPrefix.length + msgBuffer.length];System.arraycopy(msgPrefix, 0, msg, 0, msgPrefix.length);System.arraycopy(msgBuffer, 0, msg, msgPrefix.length, msgBuffer.length); 毫无难度，利用System.arraycopy方法可以轻松得拷贝数组，得到msg后，就可以计算keccak256(msg)了 1234import org.ethereum.crypto.cryptohash.Keccak256;Keccak256 keccak256 = new Keccak256();byte[] msgHash = keccak256.copy().digest(msg); 这里使用了ethereumj的加密包，当然你也可以使用其他的包或者自己实现keccak256。 结果：msgHash = 767cab717f7e9a3f56765c89f39887b9934a8e78ad4d0a2fb1fd0d009bb7012b (32字节，HEX) 好了，到目前为止msgHash已经拿到了，接下来就要处理签名了 处理签名 再来看一眼签名: 0x5f3c4ab309427d25cdc34a41cb432610c6c817e76ce9aec0c9336365063687ff29c92963edd6935f365d5f28c146f227881b626c7db18e87b9baf2089729741b1c 长度是65个字节。 然而这段签名是由三部分组成的。它们分别是 r, s, v。r和s长度都是32字节，v是一个字节。下面的代码将会吧签名拆分成上述部分。 12345import org.bouncycastle.util.encoders.Hex;byte[] r = Hex.decode(sig.substring(0, 64));byte[] s = Hex.decode(sig.substring(64, 128));byte v = Hex.decode(sig.substring(128, 130))[0]; 结果： r = 5f3c4ab309427d25cdc34a41cb432610c6c817e76ce9aec0c9336365063687ff (32字节，HEX) s = 29c92963edd6935f365d5f28c146f227881b626c7db18e87b9baf2089729741b (32字节，HEX) v = 28 (10进制) 得到这三个数据以后，就可以进入下一个环节辣 从r,s,v中反推出公钥 以太坊使用的是ECDSA进行签名，更具体的,是secp256k1椭圆曲线。 此椭圆曲线的方程是 y^2 = x^3 + 7 图像如下","categories":[{"name":"以太坊","slug":"以太坊","permalink":"http://formyown.github.io/categories/以太坊/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://formyown.github.io/tags/Java/"},{"name":"以太坊","slug":"以太坊","permalink":"http://formyown.github.io/tags/以太坊/"},{"name":"Ethereum","slug":"Ethereum","permalink":"http://formyown.github.io/tags/Ethereum/"},{"name":"加密","slug":"加密","permalink":"http://formyown.github.io/tags/加密/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-02-15T05:44:08.168Z","updated":"2019-02-16T11:04:54.716Z","comments":true,"path":"2019/02/15/hello-world/","link":"","permalink":"http://formyown.github.io/2019/02/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"文章分类","slug":"文章分类","permalink":"http://formyown.github.io/categories/文章分类/"}],"tags":[{"name":"文章标签","slug":"文章标签","permalink":"http://formyown.github.io/tags/文章标签/"}]}]}