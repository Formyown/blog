<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Formyown的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://formyown.github.io/"/>
  <updated>2019-02-16T17:27:10.425Z</updated>
  <id>http://formyown.github.io/</id>
  
  <author>
    <name>Formyown</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ethereum以太坊签名验证算法Java实现</title>
    <link href="http://formyown.github.io/2019/02/16/Ethereum%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%AD%BE%E5%90%8D%E9%AA%8C%E8%AF%81%E7%AE%97%E6%B3%95Java%E5%AE%9E%E7%8E%B0/"/>
    <id>http://formyown.github.io/2019/02/16/Ethereum以太坊签名验证算法Java实现/</id>
    <published>2019-02-16T07:41:00.000Z</published>
    <updated>2019-02-16T17:27:10.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a class="markdownIt-Anchor" href="#开始之前"></a> 开始之前</h2><p>在验证之前，我们需要这些基本的信息: 签名，原文，地址（或者公钥）</p><p><img src="/2019/02/16/Ethereum以太坊签名验证算法Java实现/lizi.jpg" alt></p><p>Sig: <code>0x5f3c4ab309427d25cdc34a41cb432610c6c817e76ce9aec0c9336365063687ff29c92963edd6935f365d5f28c146f227881b626c7db18e87b9baf2089729741b1c</code></p><p>Message: <code>签名这段文字以验证你是这个账户的持有者。</code></p><p>Address: <code>0x1c52C6F743351fC9b97AE4Fe32194A588398FE69</code></p><h2 id="处理原文"><a class="markdownIt-Anchor" href="#处理原文"></a> 处理原文</h2><p>首先我们需要将原为处理为Hash形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessageHash = keccak256(prefix + message)</span><br></pre></td></tr></table></figure><p>这个<code>prefix</code>是个什么东西？</p><p>我们来看看签名在生成的时候是如何计算的。在Ethereum官方文档中，关于<code>eth_sig</code>的描述是这样的：</p><p><img src="/2019/02/16/Ethereum以太坊签名验证算法Java实现/eth_sig.png" alt="原文地址: https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign"></p><p>可疑的地方是<code>sign(keccak256(&quot;\x19Ethereum Signed Message:\n&quot; + len(message) + message)))</code>，我们可以看到在message之前添加了一段话：<code>&quot;\x19Ethereum Signed Message:\n&quot; + len(message)</code>。真正被签名的数据不是单纯的message，而是在message之前添加了这句话（prefix）后整体做了hash运算。所以，我们在计算hash的时候，也需要照做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String message = <span class="string">"签名这段文字以验证你是这个账户的持有者。"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] msgBuffer = message.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] msgPrefix =  (<span class="string">"\u0019Ethereum Signed Message:\n"</span> + msgBuffer.length).getBytes(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p>现在已经将原始消息和prefix都转换成了字节数组的形式，接下来需要把这两部分拼接起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] msg = <span class="keyword">new</span> <span class="keyword">byte</span>[msgPrefix.length + msgBuffer.length];</span><br><span class="line">System.arraycopy(msgPrefix, <span class="number">0</span>, msg, <span class="number">0</span>, msgPrefix.length);</span><br><span class="line">System.arraycopy(msgBuffer, <span class="number">0</span>, msg, msgPrefix.length, msgBuffer.length);</span><br></pre></td></tr></table></figure><p>毫无难度，利用<code>System.arraycopy</code>方法可以轻松得拷贝数组，得到<code>msg</code>后，就可以计算<code>keccak256(msg)</code>了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.ethereum.crypto.cryptohash.Keccak256;</span><br><span class="line"></span><br><span class="line">Keccak256 keccak256 = <span class="keyword">new</span> Keccak256();</span><br><span class="line"><span class="keyword">byte</span>[] msgHash = keccak256.copy().digest(msg);</span><br></pre></td></tr></table></figure><p>这里使用了<code>ethereumj</code>的加密包，当然你也可以使用其他的包或者自己实现keccak256。</p><blockquote><p>结果：msgHash = 767cab717f7e9a3f56765c89f39887b9934a8e78ad4d0a2fb1fd0d009bb7012b (32字节，HEX)</p></blockquote><p>好了，到目前为止<code>msgHash</code>已经拿到了，接下来就要处理签名了</p><h2 id="处理签名"><a class="markdownIt-Anchor" href="#处理签名"></a> 处理签名</h2><p>再来看一眼签名: <code>0x5f3c4ab309427d25cdc34a41cb432610c6c817e76ce9aec0c9336365063687ff29c92963edd6935f365d5f28c146f227881b626c7db18e87b9baf2089729741b1c</code><br>长度是65个字节。</p><p>然而这段签名是由三部分组成的。它们分别是 <code>r</code>, <code>s</code>, <code>v</code>。<code>r</code>和<code>s</code>长度都是32字节，<code>v</code>是一个字节。下面的代码将会吧签名拆分成上述部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bouncycastle.util.encoders.Hex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] r = Hex.decode(sig.substring(<span class="number">0</span>, <span class="number">64</span>));</span><br><span class="line"><span class="keyword">byte</span>[] s = Hex.decode(sig.substring(<span class="number">64</span>, <span class="number">128</span>));</span><br><span class="line"><span class="keyword">byte</span> v = Hex.decode(sig.substring(<span class="number">128</span>, <span class="number">130</span>))[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><blockquote><p>结果：<br>r = 5f3c4ab309427d25cdc34a41cb432610c6c817e76ce9aec0c9336365063687ff (32字节，HEX)<br>s = 29c92963edd6935f365d5f28c146f227881b626c7db18e87b9baf2089729741b (32字节，HEX)<br>v = 28 (10进制)</p></blockquote><p>得到这三个数据以后，就可以进入下一个环节辣</p><h2 id="从rsv中反推出公钥"><a class="markdownIt-Anchor" href="#从rsv中反推出公钥"></a> 从r,s,v中反推出公钥</h2><p>以太坊使用的是ECDSA进行签名，更具体的,是<code>secp256k1</code>椭圆曲线。<br>此椭圆曲线的方程是</p><p>y^2 = x^3 + 7</p><p>图像如下</p><p><img src="/2019/02/16/Ethereum以太坊签名验证算法Java实现/secp256k1.png" alt="secp256k1图像"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#开始之前&quot;&gt;&lt;/a&gt; 开始之前&lt;/h2&gt;
&lt;p&gt;在验证之前，我们需要这些基本的信息: 签名，原文，地址（或者公钥）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/02/16/Eth
      
    
    </summary>
    
      <category term="以太坊" scheme="http://formyown.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="Java" scheme="http://formyown.github.io/tags/Java/"/>
    
      <category term="以太坊" scheme="http://formyown.github.io/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="Ethereum" scheme="http://formyown.github.io/tags/Ethereum/"/>
    
      <category term="加密" scheme="http://formyown.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://formyown.github.io/2019/02/15/hello-world/"/>
    <id>http://formyown.github.io/2019/02/15/hello-world/</id>
    <published>2019-02-15T05:44:08.168Z</published>
    <updated>2019-02-16T11:04:54.716Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="文章分类" scheme="http://formyown.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="文章标签" scheme="http://formyown.github.io/tags/%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
